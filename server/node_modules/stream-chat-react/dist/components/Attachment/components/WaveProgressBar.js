import { __assign } from "tslib";
import React, { useCallback, useEffect, useMemo, useRef, useState, } from 'react';
import clsx from 'clsx';
import { resampleWaveformData } from '../audioSampling';
export var WaveProgressBar = function (_a) {
    var _b = _a.amplitudesCount, amplitudesCount = _b === void 0 ? 40 : _b, _c = _a.progress, progress = _c === void 0 ? 0 : _c, seek = _a.seek, waveformData = _a.waveformData;
    var _d = useState(null), progressIndicator = _d[0], setProgressIndicator = _d[1];
    var isDragging = useRef(false);
    var rootRef = useRef(null);
    var handleDragStart = function (e) {
        e.preventDefault();
        if (!progressIndicator)
            return;
        isDragging.current = true;
        progressIndicator.style.cursor = 'grabbing';
    };
    var handleDrag = function (e) {
        if (!isDragging.current)
            return;
        // Due to throttling of seek, it is necessary to create a copy (snapshot) of the event.
        // Otherwise, the event would be nullified at the point when the throttled function is executed.
        seek(__assign({}, e));
    };
    var handleDragStop = useCallback(function () {
        if (!progressIndicator)
            return;
        isDragging.current = false;
        progressIndicator.style.removeProperty('cursor');
    }, [progressIndicator]);
    var resampledWaveformData = useMemo(function () { return resampleWaveformData(waveformData, amplitudesCount); }, [
        amplitudesCount,
        waveformData,
    ]);
    useEffect(function () {
        document.addEventListener('pointerup', handleDragStop);
        return function () {
            document.removeEventListener('pointerup', handleDragStop);
        };
    }, [handleDragStop]);
    if (!waveformData.length)
        return null;
    return (React.createElement("div", { className: 'str-chat__wave-progress-bar__track', "data-testid": 'wave-progress-bar-track', onClick: seek, onPointerDown: handleDragStart, onPointerMove: handleDrag, onPointerUp: handleDragStop, ref: rootRef, role: 'progressbar' },
        resampledWaveformData.map(function (amplitude, i) {
            var _a;
            return (React.createElement("div", { className: clsx('str-chat__wave-progress-bar__amplitude-bar', (_a = {},
                    _a['str-chat__wave-progress-bar__amplitude-bar--active'] = progress > (i / resampledWaveformData.length) * 100,
                    _a)), "data-testid": 'amplitude-bar', key: "amplitude-".concat(i), style: {
                    '--str-chat__wave-progress-bar__amplitude-bar-height': amplitude
                        ? amplitude * 100 + '%'
                        : '0%',
                } }));
        }),
        React.createElement("div", { className: 'str-chat__wave-progress-bar__progress-indicator', "data-testid": 'wave-progress-bar-progress-indicator', ref: setProgressIndicator, style: { left: "".concat(progress < 0 ? 0 : progress > 100 ? 100 : progress, "%") } })));
};
